=====================
Software Architecture
=====================

The Ma Bell Gateway firmware is a modular ESP32 application built with the ESP-IDF framework. It integrates multiple subsystems to deliver an authentic analog telephone experience—powered by Bluetooth audio, digital signal processing, and classic signaling emulation.

This section outlines the major software components, task structure, and interfaces. Each subsystem is implemented using event-driven FreeRTOS tasks, ESP-IDF drivers, and custom glue logic designed to support rotary dial inputs, tone playback, Bluetooth communication, and real-time web monitoring.

Core Subsystems
===============

The following high-level modules work together to create the complete experience:

- **Bluetooth Hands-Free Profile (HFP)**
  
  The `bt_app_core.c`, `bt_app_hf.c`, and `app_hf_msg_set.c` modules manage the Bluetooth stack and AT command exchange via the ESP32's HFP client interface. These handle pairing, call control, DTMF tone transmission, and audio routing. Events such as `ESP_HF_CLIENT_CALL_SETUP_EVT` and `ESP_HF_CLIENT_AUDIO_STATE_EVT` drive transitions in the call lifecycle.

- **DTMF Tone Detection**
  
  A tone analysis engine captures audio input from the phone line and detects valid DTMF tones using dual-frequency analysis. This is used to extract dialed numbers from tone-based phones, with the decoder module responding to frequency combinations like 697/1209 Hz or 852/1477 Hz. A separate task is responsible for processing real-time samples from the PCM stream.

- **Pulse Dial Detection**
  
  Rotary phones that pulse the line rather than emitting tones are supported via a GPIO-based pulse detector. The pulse input is debounced, timestamped, and interpreted into digit events. This allows full compatibility with pre-touch-tone rotary phones.

- **Voice Playback and Processing**
  
  The firmware supports playback of system sounds (e.g. dial tone, ringback, reorder tone) and may optionally support audio post-processing like echo cancellation. Output is streamed over I2S to a DAC or directly to an audio amplifier, while Bluetooth voice input/output is routed through ringbuffers and callbacks for duplex communication.

- **Web Interface and Internal State Viewer**
  
  A lightweight HTML interface allows internal system state to be queried via an embedded web server. Pages include current connection state, dial history, debug logs, and system metrics. This enables easy monitoring of the Ma Bell Gateway from any device on the network.

- **Front Panel Display Renderer**
  
  A small OLED or LCD panel mounted on the gateway enclosure provides real-time UI feedback. This includes indicators for Bluetooth pairing, call status, battery level (if applicable), or messages such as “Dialing…” or “Connected.” Display updates are queued and rendered from a dedicated FreeRTOS task to ensure responsiveness.

Cross-Cutting Concerns
=======================

- **FreeRTOS Tasks and Message Dispatching**

  Modules like `bt_app_core` use task queues (`bt_app_task_queue`) and message dispatching to serialize Bluetooth events and actions. This decouples low-level driver callbacks from higher-level logic, improving maintainability and system stability.

- **Hardware I/O**

  GPIOs are configured in `gpio_pcm_config.c` to route PCM audio signals, detect pulses, and optionally support acoustic echo cancellation. External pins are mapped using `esp_rom_gpio_connect_*` calls for tight integration with ESP32 signal routing.

- **Configuration and Command Console**

  Developers can interact with the system over UART using a built-in command console based on `esp_console`. Commands allow manual call control, audio routing, DTMF sending, and testing of subsystems without relying on the physical phone interface.

